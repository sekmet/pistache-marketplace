{
    "language": "Solidity",
    "sources": {
        "./contracts/MultiSigWallet.sol": {
            "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n//import \"hardhat/console.sol\";\n\ncontract MultiSigWallet is IERC721Receiver {\n    modifier adminOnly() {\n        require(isAdmin[msg.sender] == true, \"address is not an admin\");\n        _;\n    }\n\n    modifier validTransactionId(uint256 transactionId) {\n        require(\n            transactionId < transactions.length,\n            \"not a valid transactionid\"\n        );\n        _;\n    }\n\n    modifier validApproval(uint256 transactionId) {\n        require(\n            getApprovalCountFromTransaction(transactionId) >= required,\n            \"not enough admins have approved this transaction\"\n        );\n        _;\n    }\n\n    modifier notExecuted(uint256 transactionId) {\n        require(\n            !transactions[transactionId].executed,\n            \"transaction is already executed\"\n        );\n        _;\n    }\n    event Deposit(address indexed from, uint256 value);\n    event DepositERC20(address indexed from, address token, uint256 amount);\n    event DepositERC721(address indexed from, address token, uint256 tokenId);\n    event Request(address indexed requester, uint256 indexed transactionId);\n    event RequestERC20(\n        address indexed requester,\n        uint256 indexed transactionId\n    );\n    event RequestERC721(\n        address indexed requester,\n        uint256 indexed transactionId\n    );\n    event Approve(address indexed approver, uint256 indexed transactionId);\n    event Execute(address indexed executor, uint256 indexed transactionId);\n\n    struct Transaction {\n        uint256 id;\n        address requester;\n        address to;\n        uint256 value;\n        bytes data;\n        address erc20Token;\n        address erc721Token;\n        bool executed;\n    }\n\n    /// @dev transactionId => (admin => idApproved)\n    mapping(uint256 => mapping(address => bool)) public approved;\n    mapping(address => bool) public isAdmin;\n\n    Transaction[] public transactions;\n    address[] public admins;\n    uint256 public required;\n\n    /// @param _admins addresses that can sign / approve / request / execute a transaction\n    /// @param _required how many admins have to approve a transaction before it can be executed\n    constructor(address[] memory _admins, uint256 _required) {\n        required = _required;\n\n        require(_admins.length > 0, \"add more admins\");\n        require(_admins.length >= required, \"admins > required\");\n\n        for (uint256 i = 0; i < _admins.length; i++) {\n            isAdmin[_admins[i]] = true;\n            admins.push(_admins[i]);\n        }\n    }\n\n    /// @dev this will get executed when an ERC721 token is transfered to the contract\n    /// @dev is from the IERC721Receiver contract\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) public pure override returns (bytes4) {\n        operator;\n        from;\n        tokenId;\n        data;\n        return this.onERC721Received.selector;\n    }\n\n    /// @notice only for ether deposits to this contract\n    function depositToWallet() external payable {\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    /// @dev the approve() function has to be called first\n    /// @dev used only for ERC20 tokens\n    /// @param _token address of the ERC721 token\n    /// @param _amount how much we want to deposit to this contract\n    function depositERC20ToWallet(address _token, uint256 _amount) external {\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n        emit DepositERC20(msg.sender, _token, _amount);\n    }\n\n    /// @dev the approve() function has to be called first\n    /// @dev used only for ERC721 tokens, will call the onERC721Received() function if transfered\n    /// @param _token address of the ERC721 token\n    /// @param _tokenId id of the token we want to deposit to this contract\n    function depositERC721ToWallet(address _token, uint256 _tokenId) external {\n        IERC721(_token).safeTransferFrom(msg.sender, address(this), _tokenId);\n        emit DepositERC721(msg.sender, _token, _tokenId);\n    }\n\n    /// @notice creates a new transaction request for ERC721 tokens only\n    /// @dev contract has to be funded with an ERC721 token first, sets 'data' to null by default\n    /// @param  _tokenId of the ERC721 we want to use, value = _tokenId\n    /// @param  _token address of the ERC721 token we want to use\n    function createTransactionRequestForERC721(\n        address _to,\n        uint256 _tokenId,\n        address _token\n    ) external adminOnly {\n        transactions.push(\n            Transaction({\n                id: transactions.length,\n                requester: msg.sender,\n                to: _to,\n                value: _tokenId,\n                data: bytes(\"0\"),\n                erc20Token: address(0),\n                erc721Token: _token,\n                executed: false\n            })\n        );\n        emit RequestERC721(msg.sender, transactions.length - 1);\n    }\n\n    /// @notice creates a new transaction request for ERC20 tokens only\n    /// @dev contract has to be funded with an ERC20 token first, sets 'data' to null by default\n    /// @param  _value amount you want to send\n    /// @param  _token address of the ERC20 token we want to use\n    function createTransactionRequestForERC20(\n        address _to,\n        uint256 _value,\n        address _token\n    ) external adminOnly {\n        transactions.push(\n            Transaction({\n                id: transactions.length,\n                requester: msg.sender,\n                to: _to,\n                value: _value,\n                data: bytes(\"0\"),\n                erc20Token: _token,\n                erc721Token: address(0),\n                executed: false\n            })\n        );\n\n        emit RequestERC20(msg.sender, transactions.length - 1);\n    }\n\n    /// @notice creates a new transaction request\n    /// @dev contract has to be funded first\n    /// @param  _value amount you want to send\n    /// @param  _data optional\n    function createTransactionRequest(\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    ) external adminOnly {\n        transactions.push(\n            Transaction({\n                id: transactions.length,\n                requester: msg.sender,\n                to: _to,\n                value: _value,\n                data: _data,\n                erc20Token: address(0),\n                erc721Token: address(0),\n                executed: false\n            })\n        );\n\n        emit Request(msg.sender, transactions.length - 1);\n    }\n\n    /// @notice can be called by an admin and approves a transaction request (can't be revoked)\n    /// @dev it does not matter if the transaction contains an ERC20/ ERC721 token\n    /// @param _transactionId identifer for the transaction we want to approve\n    function approveTransactionRequest(uint256 _transactionId)\n        external\n        adminOnly\n        validTransactionId(_transactionId)\n    {\n        require(\n            !approved[_transactionId][msg.sender],\n            \"you have already approved this transaction\"\n        );\n        approved[_transactionId][msg.sender] = true;\n        emit Approve(msg.sender, _transactionId);\n    }\n\n    /// @notice this function will check if the requested transaction is ERC20/ ERC721 / Ether\n    /// @dev when using ERC721 tokens the 'value' of the transaction is actually the tokenId\n    /// @param _transactionId identifer for the transaction we want to execute\n    function executeTransaction(uint256 _transactionId)\n        public\n        adminOnly\n        validTransactionId(_transactionId)\n        validApproval(_transactionId)\n        notExecuted(_transactionId)\n    {\n        Transaction storage transaction = transactions[_transactionId];\n        transaction.executed = true;\n\n        if (transaction.erc20Token != address(0)) {\n            IERC20(transaction.erc20Token).transfer(\n                transaction.to,\n                transaction.value\n            );\n            emit Execute(msg.sender, _transactionId);\n        } else if (transaction.erc721Token != address(0)) {\n            IERC721(transaction.erc721Token).safeTransferFrom(\n                address(this),\n                transaction.to,\n                transaction.value\n            );\n            emit Execute(msg.sender, _transactionId);\n        } else {\n            (bool success, ) = transaction.to.call{value: transaction.value}(\n                transaction.data\n            );\n\n            require(success, \"something went wrong\");\n            emit Execute(msg.sender, _transactionId);\n        }\n    }\n\n    function getApprovalCountFromTransaction(uint256 _transactionId)\n        public\n        view\n        returns (uint256 count)\n    {\n        for (uint256 i = 0; i < admins.length; i++) {\n            if (approved[_transactionId][admins[i]] == true) {\n                count++;\n            }\n        }\n    }\n\n    function getAllAdmins() external view returns (address[] memory) {\n        return admins;\n    }\n\n    function getAllTransactions() external view returns (Transaction[] memory) {\n        return transactions;\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        }
    },
    "settings": {
        "viaIR": true,
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": ["abi", "metadata", "devdoc", "userdoc", "storageLayout", "evm.legacyAssembly", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "evm.gasEstimates", "evm.assembly"],
                "": [
                    "ast"
                ]
            }
        },
        "evmVersion": "constantinople"
    }
}