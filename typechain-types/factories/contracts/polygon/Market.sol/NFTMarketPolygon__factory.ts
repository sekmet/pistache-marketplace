/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  NFTMarketPolygon,
  NFTMarketPolygonInterface,
} from "../../../../contracts/polygon/Market.sol/NFTMarketPolygon";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sold",
        type: "bool",
      },
    ],
    name: "MarketItemCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "MarketItemSold",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createMarketItem",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
    ],
    name: "createMarketSale",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fetchMarketItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarketPolygon.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600160008190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061114c806100696000396000f3fe60806040526004361061003f5760003560e01c80630f08efe01461004457806358eb2df51461006f5780638da5cb5b1461008b578063c23b139e146100b6575b600080fd5b34801561005057600080fd5b506100596100d2565b6040516100669190610c1c565b60405180910390f35b61008960048036038101906100849190610c9b565b61039b565b005b34801561009757600080fd5b506100a0610675565b6040516100ad9190610cfd565b60405180910390f35b6100d060048036038101906100cb9190610d18565b61069b565b005b606060006100e0600161094b565b905060006100ee600261094b565b6100f8600161094b565b6101029190610d87565b90506000808267ffffffffffffffff81111561012157610120610dbb565b5b60405190808252806020026020018201604052801561015a57816020015b6101476109c8565b81526020019060019003908161013f5790505b50905060005b8481101561039057600073ffffffffffffffffffffffffffffffffffffffff16600460006001846101919190610dea565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361037d5760006001826101ed9190610dea565b90506000600460008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508486815181106103605761035f610e1e565b5b60200260200101819052506001856103789190610dea565b945050505b808061038890610e4d565b915050610160565b508094505050505090565b6103a3610959565b600081116103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dd90610ef2565b60405180910390fd5b6103f060016109a8565b60006103fc600161094b565b90506040518060e001604052808281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600460008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016105dd93929190610f21565b600060405180830381600087803b1580156105f757600080fd5b505af115801561060b573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff16827f045dfa01dcba2b36aba1d3dc4a874f4b0c5d2fbeb8d2c4b34a7d88c8d8f929d133600087600060405161065f9493929190610f67565b60405180910390a4506106706109be565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106a3610959565b60006004600083815260200190815260200160002060050154905060006004600084815260200190815260200160002060020154905060006004600085815260200190815260200160002060060160009054906101000a900460ff169050823414610743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073a9061101e565b60405180910390fd5b600115158115150361078a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107819061108a565b60405180910390fd5b837f2073b2706c235effb1e3840575370a51749afd8181b4018f93bff955d50792cb336040516107ba9190610cfd565b60405180910390a26004600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561083e573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b815260040161087c93929190610f21565b600060405180830381600087803b15801561089657600080fd5b505af11580156108aa573d6000803e3d6000fd5b50505050336004600086815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061090d60026109a8565b60016004600086815260200190815260200160002060060160006101000a81548160ff0219169083151502179055505050506109476109be565b5050565b600081600001549050919050565b60026000540361099e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610995906110f6565b60405180910390fd5b6002600081905550565b6001816000016000828254019250508190555050565b6001600081905550565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610a8881610a75565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ab982610a8e565b9050919050565b610ac981610aae565b82525050565b6000610ada82610a8e565b9050919050565b610aea81610acf565b82525050565b60008115159050919050565b610b0581610af0565b82525050565b60e082016000820151610b216000850182610a7f565b506020820151610b346020850182610ac0565b506040820151610b476040850182610a7f565b506060820151610b5a6060850182610ae1565b506080820151610b6d6080850182610ae1565b5060a0820151610b8060a0850182610a7f565b5060c0820151610b9360c0850182610afc565b50505050565b6000610ba58383610b0b565b60e08301905092915050565b6000602082019050919050565b6000610bc982610a49565b610bd38185610a54565b9350610bde83610a65565b8060005b83811015610c0f578151610bf68882610b99565b9750610c0183610bb1565b925050600181019050610be2565b5085935050505092915050565b60006020820190508181036000830152610c368184610bbe565b905092915050565b600080fd5b610c4c81610aae565b8114610c5757600080fd5b50565b600081359050610c6981610c43565b92915050565b610c7881610a75565b8114610c8357600080fd5b50565b600081359050610c9581610c6f565b92915050565b600080600060608486031215610cb457610cb3610c3e565b5b6000610cc286828701610c5a565b9350506020610cd386828701610c86565b9250506040610ce486828701610c86565b9150509250925092565b610cf781610aae565b82525050565b6000602082019050610d126000830184610cee565b92915050565b60008060408385031215610d2f57610d2e610c3e565b5b6000610d3d85828601610c5a565b9250506020610d4e85828601610c86565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9282610a75565b9150610d9d83610a75565b9250828203905081811115610db557610db4610d58565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610df582610a75565b9150610e0083610a75565b9250828201905080821115610e1857610e17610d58565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e5882610a75565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e8a57610e89610d58565b5b600182019050919050565b600082825260208201905092915050565b7f5072696365206d7573742062652067726561746572207468616e203000000000600082015250565b6000610edc601c83610e95565b9150610ee782610ea6565b602082019050919050565b60006020820190508181036000830152610f0b81610ecf565b9050919050565b610f1b81610a75565b82525050565b6000606082019050610f366000830186610cee565b610f436020830185610cee565b610f506040830184610f12565b949350505050565b610f6181610af0565b82525050565b6000608082019050610f7c6000830187610cee565b610f896020830186610cee565b610f966040830185610f12565b610fa36060830184610f58565b95945050505050565b7f506c65617365207375626d6974207468652061736b696e67207072696365206960008201527f6e206f7264657220746f20636f6d706c65746520746865207075726368617365602082015250565b6000611008604083610e95565b915061101382610fac565b604082019050919050565b6000602082019050818103600083015261103781610ffb565b9050919050565b7f546869732053616c652068617320616c726564792066696e6e69736865640000600082015250565b6000611074601e83610e95565b915061107f8261103e565b602082019050919050565b600060208201905081810360008301526110a381611067565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006110e0601f83610e95565b91506110eb826110aa565b602082019050919050565b6000602082019050818103600083015261110f816110d3565b905091905056fea26469706673582212206f72c1cdfaf6a065e1acccfce0011c4843bb3bd6bf6a374f446f8d5dfb9d55b064736f6c63430008110033";

type NFTMarketPolygonConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTMarketPolygonConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTMarketPolygon__factory extends ContractFactory {
  constructor(...args: NFTMarketPolygonConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTMarketPolygon> {
    return super.deploy(overrides || {}) as Promise<NFTMarketPolygon>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTMarketPolygon {
    return super.attach(address) as NFTMarketPolygon;
  }
  override connect(signer: Signer): NFTMarketPolygon__factory {
    return super.connect(signer) as NFTMarketPolygon__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTMarketPolygonInterface {
    return new utils.Interface(_abi) as NFTMarketPolygonInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTMarketPolygon {
    return new Contract(address, _abi, signerOrProvider) as NFTMarketPolygon;
  }
}
