/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace MultiSigWallet {
  export type TransactionStruct = {
    id: PromiseOrValue<BigNumberish>;
    requester: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    erc20Token: PromiseOrValue<string>;
    erc721Token: PromiseOrValue<string>;
    executed: PromiseOrValue<boolean>;
  };

  export type TransactionStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    boolean
  ] & {
    id: BigNumber;
    requester: string;
    to: string;
    value: BigNumber;
    data: string;
    erc20Token: string;
    erc721Token: string;
    executed: boolean;
  };
}

export interface MultiSigWalletInterface extends utils.Interface {
  functions: {
    "admins(uint256)": FunctionFragment;
    "approveTransactionRequest(uint256)": FunctionFragment;
    "approved(uint256,address)": FunctionFragment;
    "createTransactionRequest(address,uint256,bytes)": FunctionFragment;
    "createTransactionRequestForERC20(address,uint256,address)": FunctionFragment;
    "createTransactionRequestForERC721(address,uint256,address)": FunctionFragment;
    "depositERC20ToWallet(address,uint256)": FunctionFragment;
    "depositERC721ToWallet(address,uint256)": FunctionFragment;
    "depositToWallet()": FunctionFragment;
    "executeTransaction(uint256)": FunctionFragment;
    "getAllAdmins()": FunctionFragment;
    "getAllTransactions()": FunctionFragment;
    "getApprovalCountFromTransaction(uint256)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "required()": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admins"
      | "approveTransactionRequest"
      | "approved"
      | "createTransactionRequest"
      | "createTransactionRequestForERC20"
      | "createTransactionRequestForERC721"
      | "depositERC20ToWallet"
      | "depositERC721ToWallet"
      | "depositToWallet"
      | "executeTransaction"
      | "getAllAdmins"
      | "getAllTransactions"
      | "getApprovalCountFromTransaction"
      | "isAdmin"
      | "onERC721Received"
      | "required"
      | "transactions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "admins",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTransactionRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approved",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransactionRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransactionRequestForERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransactionRequestForERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20ToWallet",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721ToWallet",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovalCountFromTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "required", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveTransactionRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTransactionRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransactionRequestForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransactionRequestForERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20ToWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721ToWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovalCountFromTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;

  events: {
    "Approve(address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "DepositERC20(address,address,uint256)": EventFragment;
    "DepositERC721(address,address,uint256)": EventFragment;
    "Execute(address,uint256)": EventFragment;
    "Request(address,uint256)": EventFragment;
    "RequestERC20(address,uint256)": EventFragment;
    "RequestERC721(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Request"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestERC721"): EventFragment;
}

export interface ApproveEventObject {
  approver: string;
  transactionId: BigNumber;
}
export type ApproveEvent = TypedEvent<[string, BigNumber], ApproveEventObject>;

export type ApproveEventFilter = TypedEventFilter<ApproveEvent>;

export interface DepositEventObject {
  from: string;
  value: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositERC20EventObject {
  from: string;
  token: string;
  amount: BigNumber;
}
export type DepositERC20Event = TypedEvent<
  [string, string, BigNumber],
  DepositERC20EventObject
>;

export type DepositERC20EventFilter = TypedEventFilter<DepositERC20Event>;

export interface DepositERC721EventObject {
  from: string;
  token: string;
  tokenId: BigNumber;
}
export type DepositERC721Event = TypedEvent<
  [string, string, BigNumber],
  DepositERC721EventObject
>;

export type DepositERC721EventFilter = TypedEventFilter<DepositERC721Event>;

export interface ExecuteEventObject {
  executor: string;
  transactionId: BigNumber;
}
export type ExecuteEvent = TypedEvent<[string, BigNumber], ExecuteEventObject>;

export type ExecuteEventFilter = TypedEventFilter<ExecuteEvent>;

export interface RequestEventObject {
  requester: string;
  transactionId: BigNumber;
}
export type RequestEvent = TypedEvent<[string, BigNumber], RequestEventObject>;

export type RequestEventFilter = TypedEventFilter<RequestEvent>;

export interface RequestERC20EventObject {
  requester: string;
  transactionId: BigNumber;
}
export type RequestERC20Event = TypedEvent<
  [string, BigNumber],
  RequestERC20EventObject
>;

export type RequestERC20EventFilter = TypedEventFilter<RequestERC20Event>;

export interface RequestERC721EventObject {
  requester: string;
  transactionId: BigNumber;
}
export type RequestERC721Event = TypedEvent<
  [string, BigNumber],
  RequestERC721EventObject
>;

export type RequestERC721EventFilter = TypedEventFilter<RequestERC721Event>;

export interface MultiSigWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiSigWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    approveTransactionRequest(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approved(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createTransactionRequest(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTransactionRequestForERC20(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTransactionRequestForERC721(
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC20ToWallet(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC721ToWallet(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositToWallet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllAdmins(overrides?: CallOverrides): Promise<[string[]]>;

    getAllTransactions(
      overrides?: CallOverrides
    ): Promise<[MultiSigWallet.TransactionStructOutput[]]>;

    getApprovalCountFromTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    isAdmin(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    required(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        string,
        boolean
      ] & {
        id: BigNumber;
        requester: string;
        to: string;
        value: BigNumber;
        data: string;
        erc20Token: string;
        erc721Token: string;
        executed: boolean;
      }
    >;
  };

  admins(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  approveTransactionRequest(
    _transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approved(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createTransactionRequest(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTransactionRequestForERC20(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTransactionRequestForERC721(
    _to: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC20ToWallet(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC721ToWallet(
    _token: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositToWallet(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTransaction(
    _transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllAdmins(overrides?: CallOverrides): Promise<string[]>;

  getAllTransactions(
    overrides?: CallOverrides
  ): Promise<MultiSigWallet.TransactionStructOutput[]>;

  getApprovalCountFromTransaction(
    _transactionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAdmin(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC721Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  required(overrides?: CallOverrides): Promise<BigNumber>;

  transactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, string, string, string, boolean] & {
      id: BigNumber;
      requester: string;
      to: string;
      value: BigNumber;
      data: string;
      erc20Token: string;
      erc721Token: string;
      executed: boolean;
    }
  >;

  callStatic: {
    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    approveTransactionRequest(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approved(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createTransactionRequest(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createTransactionRequestForERC20(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createTransactionRequestForERC721(
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC20ToWallet(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC721ToWallet(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToWallet(overrides?: CallOverrides): Promise<void>;

    executeTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllAdmins(overrides?: CallOverrides): Promise<string[]>;

    getAllTransactions(
      overrides?: CallOverrides
    ): Promise<MultiSigWallet.TransactionStructOutput[]>;

    getApprovalCountFromTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        string,
        boolean
      ] & {
        id: BigNumber;
        requester: string;
        to: string;
        value: BigNumber;
        data: string;
        erc20Token: string;
        erc721Token: string;
        executed: boolean;
      }
    >;
  };

  filters: {
    "Approve(address,uint256)"(
      approver?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): ApproveEventFilter;
    Approve(
      approver?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): ApproveEventFilter;

    "Deposit(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      value?: null
    ): DepositEventFilter;
    Deposit(
      from?: PromiseOrValue<string> | null,
      value?: null
    ): DepositEventFilter;

    "DepositERC20(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null
    ): DepositERC20EventFilter;
    DepositERC20(
      from?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null
    ): DepositERC20EventFilter;

    "DepositERC721(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      token?: null,
      tokenId?: null
    ): DepositERC721EventFilter;
    DepositERC721(
      from?: PromiseOrValue<string> | null,
      token?: null,
      tokenId?: null
    ): DepositERC721EventFilter;

    "Execute(address,uint256)"(
      executor?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): ExecuteEventFilter;
    Execute(
      executor?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): ExecuteEventFilter;

    "Request(address,uint256)"(
      requester?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): RequestEventFilter;
    Request(
      requester?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): RequestEventFilter;

    "RequestERC20(address,uint256)"(
      requester?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): RequestERC20EventFilter;
    RequestERC20(
      requester?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): RequestERC20EventFilter;

    "RequestERC721(address,uint256)"(
      requester?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): RequestERC721EventFilter;
    RequestERC721(
      requester?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): RequestERC721EventFilter;
  };

  estimateGas: {
    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveTransactionRequest(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approved(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTransactionRequest(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTransactionRequestForERC20(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTransactionRequestForERC721(
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC20ToWallet(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC721ToWallet(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositToWallet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllAdmins(overrides?: CallOverrides): Promise<BigNumber>;

    getAllTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    getApprovalCountFromTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveTransactionRequest(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approved(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createTransactionRequest(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTransactionRequestForERC20(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTransactionRequestForERC721(
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20ToWallet(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC721ToWallet(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositToWallet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllAdmins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovalCountFromTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    required(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
