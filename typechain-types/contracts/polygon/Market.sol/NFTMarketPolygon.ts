/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace NFTMarketPolygon {
  export type MarketItemStruct = {
    itemId: PromiseOrValue<BigNumberish>;
    nftContract: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    sold: PromiseOrValue<boolean>;
  };

  export type MarketItemStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    itemId: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    sold: boolean;
  };
}

export interface NFTMarketPolygonInterface extends utils.Interface {
  functions: {
    "createMarketItem(address,uint256,uint256)": FunctionFragment;
    "createMarketSale(address,uint256)": FunctionFragment;
    "fetchMarketItems()": FunctionFragment;
    "owner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createMarketItem"
      | "createMarketSale"
      | "fetchMarketItems"
      | "owner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createMarketItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketSale",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;

  events: {
    "MarketItemCreated(uint256,address,uint256,address,address,uint256,bool)": EventFragment;
    "MarketItemSold(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketItemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketItemSold"): EventFragment;
}

export interface MarketItemCreatedEventObject {
  itemId: BigNumber;
  nftContract: string;
  tokenId: BigNumber;
  seller: string;
  owner: string;
  price: BigNumber;
  sold: boolean;
}
export type MarketItemCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber, boolean],
  MarketItemCreatedEventObject
>;

export type MarketItemCreatedEventFilter =
  TypedEventFilter<MarketItemCreatedEvent>;

export interface MarketItemSoldEventObject {
  itemId: BigNumber;
  owner: string;
}
export type MarketItemSoldEvent = TypedEvent<
  [BigNumber, string],
  MarketItemSoldEventObject
>;

export type MarketItemSoldEventFilter = TypedEventFilter<MarketItemSoldEvent>;

export interface NFTMarketPolygon extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketPolygonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMarketItem(
      nftContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMarketSale(
      nftContract: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<[NFTMarketPolygon.MarketItemStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;
  };

  createMarketItem(
    nftContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMarketSale(
    nftContract: PromiseOrValue<string>,
    itemId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchMarketItems(
    overrides?: CallOverrides
  ): Promise<NFTMarketPolygon.MarketItemStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createMarketItem(
      nftContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarketSale(
      nftContract: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<NFTMarketPolygon.MarketItemStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MarketItemCreated(uint256,address,uint256,address,address,uint256,bool)"(
      itemId?: PromiseOrValue<BigNumberish> | null,
      nftContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): MarketItemCreatedEventFilter;
    MarketItemCreated(
      itemId?: PromiseOrValue<BigNumberish> | null,
      nftContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): MarketItemCreatedEventFilter;

    "MarketItemSold(uint256,address)"(
      itemId?: PromiseOrValue<BigNumberish> | null,
      owner?: null
    ): MarketItemSoldEventFilter;
    MarketItemSold(
      itemId?: PromiseOrValue<BigNumberish> | null,
      owner?: null
    ): MarketItemSoldEventFilter;
  };

  estimateGas: {
    createMarketItem(
      nftContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMarketSale(
      nftContract: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createMarketItem(
      nftContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMarketSale(
      nftContract: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchMarketItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
